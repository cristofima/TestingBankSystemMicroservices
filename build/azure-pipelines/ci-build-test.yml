trigger:
  branches:
    include:
      - main
      - develop
      - feature/*
  paths:
    include:
      - 'src/services/**/src/**'
      - 'src/services/**/tests/**'
      - 'build/azure-pipelines/ci-build-test.yml'
    exclude:
      - 'src/services/**/*.md'
      - 'src/services/**/README.md'

variables:
  buildConfiguration: 'Release'
  solution: 'src/BankSystem.sln'
  testProjectsPattern: 'src/**/tests/**/*.csproj'
  resultsDirectory: '$(Agent.TempDirectory)/TestResults'

stages:
- stage: BuildAndTest
  jobs:

  - job: Ubuntu
    displayName: 'Ubuntu Agent'
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET 9 SDK'
      inputs:
        packageType: 'sdk'
        version: '9.x'

    # Docker is already installed & running on ubuntu-latest
    - bash: docker info
      displayName: "Verify Docker engine"

    # Clear SonarQube cache to prevent hanging issues
    - bash: |
        rm -rf ~/.sonar/cache || true
        echo "SonarQube cache cleared"
      displayName: "Clear SonarQube Cache"
      condition: and(succeeded(), ne(variables['SONAR_PROJECT_KEY'], ''))

    - task: SonarQubePrepare@7
      displayName: 'Prepare SonarQube Analysis'
      inputs:
        SonarQube: 'SonarQube'
        organization: '$(SONAR_ORGANIZATION)'
        scannerMode: 'dotnet'
        projectKey: '$(SONAR_PROJECT_KEY)'
        projectName: '$(SONAR_PROJECT_NAME)'
        extraProperties: |
          sonar.organization=$(SONAR_ORGANIZATION)
          sonar.sources=src/services/Security/src,src/services/Account/src,src/services/Movement/src,src/services/Transaction/src
          sonar.tests=src/services/Security/tests,src/services/Account/tests,src/services/Movement/tests,src/services/Transaction/tests
          sonar.exclusions=**/bin/**,**/obj/**
          sonar.test.inclusions=**/*Test*.cs,**/*Tests.cs
          sonar.test.exclusions=**/bin/**,**/obj/**
          sonar.cs.opencover.reportsPaths=$(Agent.TempDirectory)/**/*.xml
          sonar.cs.vstest.reportsPaths=$(Agent.TempDirectory)/**/*.trx
          sonar.sourceEncoding=UTF-8
      condition: and(succeeded(), ne(variables['SONAR_PROJECT_KEY'], ''))
      timeoutInMinutes: 10

    - task: DotNetCoreCLI@2
      displayName: 'Restore NuGet packages'
      inputs:
        command: 'restore'
        projects: '$(solution)'

    - task: DotNetCoreCLI@2
      displayName: 'Build Solution'
      inputs:
        command: 'build'
        projects: '$(solution)'
        arguments: '--configuration $(buildConfiguration) --no-restore'

    - bash: |
        echo "Listing test projects..."
        find $(Build.SourcesDirectory) -name "*UnitTests.csproj" -o -name "*IntegrationTests.csproj"
        echo "Solution directory structure:"
        ls -la $(Build.SourcesDirectory)/src/services/
        echo "Checking if test projects are built..."
        ls -la $(Build.SourcesDirectory)/src/services/Security/tests/Security.Application.UnitTests/bin/$(buildConfiguration)/net9.0/ || echo "Unit test build output not found"
        ls -la $(Build.SourcesDirectory)/src/services/Security/tests/Security.Infrastructure.IntegrationTests/bin/$(buildConfiguration)/net9.0/ || echo "Integration test build output not found"
      displayName: 'Debug - List Test Projects and Build Output'

    - task: DotNetCoreCLI@2
      displayName: 'Run Unit Tests with Code Coverage'
      inputs:
        command: 'test'
        projects: 'src/services/Security/tests/Security.Application.UnitTests/Security.Application.UnitTests.csproj'
        arguments: '--configuration $(buildConfiguration) --settings "$(Build.SourcesDirectory)/src/coverlet.runsettings"'
        publishTestResults: true

    - task: DotNetCoreCLI@2
      displayName: 'Run Integration Tests with Code Coverage'
      inputs:
        command: 'test'
        projects: 'src/services/Security/tests/Security.Infrastructure.IntegrationTests/Security.Infrastructure.IntegrationTests.csproj'
        arguments: '--configuration $(buildConfiguration) --settings "$(Build.SourcesDirectory)/src/coverlet.runsettings"'
        publishTestResults: true
      # Note: TestContainers will automatically use Docker on Linux
      continueOnError: true

    - bash: |
        echo "Listing coverage files in all possible locations..."
        echo "=== Azure DevOps temp directory ==="
        find $(Agent.TempDirectory) -name "*.xml" -type f 2>/dev/null | grep -i coverage || echo "No coverage files in temp directory"
        echo "=== Custom results directory ==="
        find $(resultsDirectory) -name "*.xml" -type f 2>/dev/null | grep -i coverage || echo "No coverage files in custom directory"
        echo "=== All TestResults directories ==="
        find $(System.DefaultWorkingDirectory) -name "TestResults" -type d 2>/dev/null || echo "No TestResults directories found"
        echo "=== All coverage files across the build ==="
        find $(System.DefaultWorkingDirectory) -name "*coverage*.xml" -type f 2>/dev/null || echo "No coverage files found anywhere"
        echo "=== Azure DevOps temp structure ==="
        ls -la $(Agent.TempDirectory)/ 2>/dev/null || echo "Cannot list temp directory"
      displayName: 'Debug - List Coverage Files'

    - task: PublishCodeCoverageResults@2
      displayName: 'Publish Code Coverage to Azure DevOps'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
        pathToSources: '$(Build.SourcesDirectory)/src'
        failIfCoverageEmpty: false
      condition: succeeded()

    # Optional: Add delay before SonarQube analysis to help with rate limiting
    - bash: |
        echo "Waiting before SonarQube analysis to prevent rate limiting..."
        sleep 15
      displayName: "Pre-Analysis Delay"
      condition: and(succeeded(), ne(variables['SONAR_PROJECT_KEY'], ''))

    - task: SonarQubeAnalyze@7
      displayName: 'Run SonarQube Analysis'
      condition: and(succeeded(), ne(variables['SONAR_PROJECT_KEY'], ''))
      timeoutInMinutes: 15

    - task: SonarQubePublish@7
      displayName: 'Publish SonarQube Quality Gate Result'
      inputs:
        pollingTimeoutSec: '300'
      condition: and(succeeded(), ne(variables['SONAR_PROJECT_KEY'], ''))